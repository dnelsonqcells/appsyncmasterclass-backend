service: appsyncmasterclass-backend
frameworkVersion: "3"

plugins:
    - serverless-appsync-plugin
    - serverless-iam-roles-per-function
    - serverless-export-env
    - serverless-export-outputs

provider:
    name: aws
    runtime: nodejs20.x
    region: us-east-1
    stage: dev
    environment:
        STAGE: ${self:custom.stage}
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

package:
    exclude:
        - package-lock.json
        - package.json

custom:
    region: ${opt:region, self:provider.region}
    stage: ${opt:stage, self:provider.stage}
    exportOutputs:
        include:
            - AwsRegion
            - CognitoUserPoolId
            - WebCognitoUserPoolClientId
        output:
            file: ./.env-outputs

appSync:
    name: appsyncmasterclass
    schema: schema.api.graphql
    authentication:
        type: "AMAZON_COGNITO_USER_POOLS"
        config:
            awsRegion: us-east-1
            defaultAction: ALLOW
            userPoolId: !Ref CognitoUserPool
    logging:
        level: ALL
    pipelineFunctions:
        getFollowers:
            dataSource: relationshipsTable
            code: resolvers/getFollowers.js
        hydrateFollowers:
            dataSource: usersTable
            code: resolvers/hydrateFollowers.js
        getFollowing:
            dataSource: relationshipsTable
            code: resolvers/getFollowing.js
        hydrateFollowing:
            dataSource: usersTable
            code: resolvers/hydrateFollowing.js

    resolvers:
        # Queries
        Query.getMyProfile:
            functions:
                - dataSource: usersTable
                  code: resolvers/getMyProfile.js
        Query.getProfile:
            functions:
                - dataSource: usersTable
                  code: resolvers/getProfile.js
        Query.getFollowers:
            functions:
                - getFollowers
                - hydrateFollowers
        Query.getFollowing:
            functions:
                - getFollowing
                - hydrateFollowing
        Query.getTweets:
            functions:
                - dataSource: tweetsTable
                  code: resolvers/getTweets.js
        Query.getImageUploadUrl:
            functions:
                - dataSource: getImageUploadUrlFunction
        Query.getMyTimeline:
            functions:
                - dataSource: timelinesTable
                  code: resolvers/getMyTimeline.js
        Query.getLikes:
            functions:
                - dataSource: likesTable
                  code: resolvers/getMyTimeline.js
        # Mutations
        Mutation.editMyProfile:
            functions:
                - dataSource: usersTable
                  code: resolvers/editMyProfile.js
        Mutation.tweet:
            functions:
                - dataSource: tweetFunction
        Mutation.retweet:
            functions:
                - dataSource: retweetFunction
        Mutation.like:
            functions:
                - dataSource: likesMutation
                  code: resolvers/like.js
        Mutation.unlike:
            functions:
                - dataSource: unlikeMutation
                  code: resolvers/unlike.js
        Mutation.reply:
            functions:
                - dataSource: replyFunction
        Mutation.follow:
            functions:
                - dataSource: followMutation
                  code: resolvers/follow.js
        Mutation.unfollow:
            functions:
                - dataSource: unfollowMutation
                  code: resolvers/unfollow.js
        # Nested Fields
        Tweet.profile:
            functions:
                - dataSource: usersTable
                  code: resolvers/Tweet.profile.js
        Retweet.profile:
            functions:
                - dataSource: usersTable
                  code: resolvers/Tweet.profile.js
        Reply.profile:
            functions:
                - dataSource: usersTable
                  code: resolvers/Tweet.profile.js
        Tweet.liked:
            functions:
                - dataSource: likesTable
                  code: resolvers/Tweet.liked.js
        Reply.liked:
            functions:
                - dataSource: likesTable
                  code: resolvers/Tweet.liked.js
        Tweet.retweeted:
            functions:
                - dataSource: retweetsTable
                  code: resolvers/Tweet.retweeted.js
        Reply.retweeted:
            functions:
                - dataSource: retweetsTable
                  code: resolvers/Tweet.retweeted.js
        Retweet.retweetOf:
            functions:
                - dataSource: tweetsTable
                  code: resolvers/Retweet.retweetOf.js
        Reply.inReplyToTweet:
            functions:
                - dataSource: tweetsTable
                  code: resolvers/Reply.inReplyToTweet.js
        Reply.inReplyToUsers:
            functions:
                - dataSource: usersTable
                  code: resolvers/Reply.inReplyToUsers.js
        UnhydratedTweetsPage.tweets:
            functions:
                - dataSource: tweetsTable
                  code: resolvers/UnhydratedTweetsPage.tweets.js
        MyProfile.tweets:
            functions:
                - dataSource: tweetsTable
                  code: resolvers/MyProfile.tweets.js
        OtherProfile.tweets:
            functions:
                - dataSource: tweetsTable
                  code: resolvers/MyProfile.tweets.js
        OtherProfile.following:
            functions:
                - dataSource: relationshipsTable
                  code: resolvers/OtherProfile.following.js
        OtherProfile.followedBy:
            functions:
                - dataSource: relationshipsTable
                  code: resolvers/OtherProfile.followedBy.js

    substitutions:
        TWEETS_TABLE: !Ref TweetsTable
        LIKES_TABLE: !Ref LikesTable
        USERS_TABLE: !Ref UsersTable
        RELATIONSHIPS_TABLE: !Ref RelationshipsTable

    dataSources:
        none:
            type: NONE
        usersTable:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref UsersTable
        tweetsTable:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref TweetsTable
        retweetsTable:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref RetweetsTable
        timelinesTable:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref TimelinesTable
        likesTable:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref LikesTable
        relationshipsTable:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref RelationshipsTable
        likesMutation:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref LikesTable
                iamRoleStatements:
                    - Effect: Allow
                      Action:
                          - dynamodb:PutItem
                      Resource: !GetAtt LikesTable.Arn
                    - Effect: Allow
                      Action:
                          - dynamodb:UpdateItem
                      Resource:
                          - !GetAtt UsersTable.Arn
                          - !GetAtt TweetsTable.Arn
        followMutation:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref RelationshipsTable
                iamRoleStatements:
                    - Effect: Allow
                      Action:
                          - dynamodb:PutItem
                      Resource: !GetAtt RelationshipsTable.Arn
                    - Effect: Allow
                      Action:
                          - dynamodb:UpdateItem
                      Resource:
                          - !GetAtt UsersTable.Arn
        unfollowMutation:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref RelationshipsTable
                iamRoleStatements:
                    - Effect: Allow
                      Action:
                          - dynamodb:DeleteItem
                      Resource: !GetAtt RelationshipsTable.Arn
                    - Effect: Allow
                      Action:
                          - dynamodb:UpdateItem
                      Resource:
                          - !GetAtt UsersTable.Arn
        unlikeMutation:
            type: AMAZON_DYNAMODB
            config:
                tableName: !Ref LikesTable
                iamRoleStatements:
                    - Effect: Allow
                      Action:
                          - dynamodb:DeleteItem
                      Resource: !GetAtt LikesTable.Arn
                    - Effect: Allow
                      Action:
                          - dynamodb:UpdateItem
                      Resource:
                          - !GetAtt UsersTable.Arn
                          - !GetAtt TweetsTable.Arn
        getImageUploadUrlFunction:
            type: AWS_LAMBDA
            config:
                functionName: getImageUploadUrl
        tweetFunction:
            type: AWS_LAMBDA
            config:
                functionName: tweet
        retweetFunction:
            type: AWS_LAMBDA
            config:
                functionName: retweet
        unretweetFunction:
            type: AWS_LAMBDA
            config:
                functionName: unretweet
        replyFunction:
            type: AWS_LAMBDA
            config:
                functionName: reply

functions:
    confirmUserSignup:
        handler: functions/confirm-user-signup.handler
        environment:
            USERS_TABLE: !Ref UsersTable
        iamRoleStatements:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt UsersTable.Arn

    getImageUploadUrl:
        handler: functions/get-upload-url.handler
        environment:
            BUCKET_NAME: !Ref AssetsBucket
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
              Resource: !Sub ${AssetsBucket.Arn}/*

    tweet:
        handler: functions/tweet.handler
        environment:
            USERS_TABLE: !Ref UsersTable
            TWEETS_TABLE: !Ref TweetsTable
            TIMELINES_TABLE: !Ref TimelinesTable
        iamRoleStatements:
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource: !GetAtt UsersTable.Arn
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource:
                  - !GetAtt TweetsTable.Arn
                  - !GetAtt TimelinesTable.Arn

    retweet:
        handler: functions/retweet.handler
        environment:
            USERS_TABLE: !Ref UsersTable
            TWEETS_TABLE: !Ref TweetsTable
            TIMELINES_TABLE: !Ref TimelinesTable
            RETWEETS_TABLE: !Ref RetweetsTable
        iamRoleStatements:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt TweetsTable.Arn
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource:
                  - !GetAtt TweetsTable.Arn
                  - !GetAtt UsersTable.Arn
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource:
                  - !GetAtt TweetsTable.Arn
                  - !GetAtt TimelinesTable.Arn
                  - !GetAtt RetweetsTable.Arn

    unretweet:
        handler: functions/unretweet.handler
        environment:
            USERS_TABLE: !Ref UsersTable
            TWEETS_TABLE: !Ref TweetsTable
            TIMELINES_TABLE: !Ref TimelinesTable
            RETWEETS_TABLE: !Ref RetweetsTable
        iamRoleStatements:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt TweetsTable.Arn
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub "${TweetsTable.Arn}/index/retweetsByCreator"
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource:
                  - !GetAtt TweetsTable.Arn
                  - !GetAtt UsersTable.Arn
            - Effect: Allow
              Action: dynamodb:DeleteItem
              Resource:
                  - !GetAtt TweetsTable.Arn
                  - !GetAtt TimelinesTable.Arn
                  - !GetAtt RetweetsTable.Arn

    reply:
        handler: functions/reply.handler
        environment:
            USERS_TABLE: !Ref UsersTable
            TWEETS_TABLE: !Ref TweetsTable
            TIMELINES_TABLE: !Ref TimelinesTable
        iamRoleStatements:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt TweetsTable.Arn
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource:
                  - !GetAtt TweetsTable.Arn
                  - !GetAtt UsersTable.Arn
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource:
                  - !GetAtt TweetsTable.Arn
                  - !GetAtt TimelinesTable.Arn

    distributeTweets:
        handler: functions/distribute-tweets.handler
        environment:
            RELATIONSHIPS_TABLE: !Ref RelationshipsTable
            TIMELINES_TABLE: !Ref TimelinesTable
        events:
            - stream:
                  type: dynamodb
                  arn: !GetAtt TweetsTable.StreamArn
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
              Resource: !GetAtt TimelinesTable.Arn
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub "${RelationshipsTable.Arn}/index/byOtherUser"

    distributeTweetsToFollower:
        handler: functions/distribute-tweets-to-follower.handler
        environment:
            TWEETS_TABLE: !Ref TweetsTable
            TIMELINES_TABLE: !Ref TimelinesTable
            MAX_TWEETS: 100
        events:
            - stream:
                  type: dynamodb
                  arn: !GetAtt RelationshipsTable.StreamArn
        iamRoleStatementsName: ${self:service}-${self:custom.stage}-distributeTweetsToFollower
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
              Resource: !GetAtt TimelinesTable.Arn
            - Effect: Allow
              Action: dynamodb:Query
              Resource:
                  - !Sub "${TweetsTable.Arn}/index/byCreator"
                  - !Sub "${TimelinesTable.Arn}/index/byDistributedFrom"

resources:
    Resources:
        UsersTable:
            Type: AWS::DynamoDB::Table
            Properties:
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: screenName
                      AttributeType: S
                GlobalSecondaryIndexes:
                    - IndexName: byScreenName
                      KeySchema:
                          - AttributeName: screenName
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
                Tags:
                    - Key: Environment
                      Value: ${self:custom.stage}
                    - Key: Name
                      Value: users-table

        TweetsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: creator
                      AttributeType: S
                    - AttributeName: retweetOf
                      AttributeType: S
                    - AttributeName: inReplyToTweetId
                      AttributeType: S
                GlobalSecondaryIndexes:
                    - IndexName: byCreator
                      KeySchema:
                          - AttributeName: creator
                            KeyType: HASH
                          - AttributeName: id
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                    - IndexName: retweetsByCreator
                      KeySchema:
                          - AttributeName: creator
                            KeyType: HASH
                          - AttributeName: retweetOf
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                    - IndexName: repliesForTweet
                      KeySchema:
                          - AttributeName: inReplyToTweetId
                            KeyType: HASH
                          - AttributeName: id
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                StreamSpecification:
                    StreamViewType: NEW_AND_OLD_IMAGES
                Tags:
                    - Key: Environment
                      Value: ${self:custom.stage}
                    - Key: Name
                      Value: tweets-table

        LikesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH
                    - AttributeName: tweetId
                      KeyType: RANGE
                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                    - AttributeName: tweetId
                      AttributeType: S
                Tags:
                    - Key: Environment
                      Value: ${self:custom.stage}
                    - Key: Name
                      Value: likes-table

        RetweetsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH
                    - AttributeName: tweetId
                      KeyType: RANGE
                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                    - AttributeName: tweetId
                      AttributeType: S
                Tags:
                    - Key: Environment
                      Value: ${self:custom.stage}
                    - Key: Name
                      Value: retweets-table

        RelationshipsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH
                    - AttributeName: sk
                      KeyType: RANGE
                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                    - AttributeName: sk
                      AttributeType: S
                    - AttributeName: otherUserId
                      AttributeType: S
                GlobalSecondaryIndexes:
                    - IndexName: byOtherUser
                      KeySchema:
                          - AttributeName: otherUserId
                            KeyType: HASH
                          - AttributeName: sk
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                StreamSpecification:
                    StreamViewType: NEW_AND_OLD_IMAGES
                Tags:
                    - Key: Environment
                      Value: ${self:custom.stage}
                    - Key: Name
                      Value: relationships-table

        TimelinesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH
                    - AttributeName: tweetId
                      KeyType: RANGE
                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                    - AttributeName: tweetId
                      AttributeType: S
                    - AttributeName: distributedFrom
                      AttributeType: S
                GlobalSecondaryIndexes:
                    - IndexName: byDistributedFrom
                      KeySchema:
                          - AttributeName: userId
                            KeyType: HASH
                          - AttributeName: distributedFrom
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                Tags:
                    - Key: Environment
                      Value: ${self:custom.stage}
                    - Key: Name
                      Value: timelines-table

        CognitoUserPool:
            Type: AWS::Cognito::UserPool
            Properties:
                AutoVerifiedAttributes:
                    - email
                Policies:
                    PasswordPolicy:
                        MinimumLength: 8
                        RequireLowercase: false
                        RequireNumbers: false
                        RequireUppercase: false
                        RequireSymbols: false
                UsernameAttributes:
                    - email
                Schema:
                    - AttributeDataType: String
                      Name: name
                      Required: false
                      Mutable: true
                LambdaConfig:
                    PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

        UserPoolInvokeConfirmUserSignupLambdaPermission:
            Type: AWS::Lambda::Permission
            Properties:
                Action: lambda:invokeFunction
                FunctionName: !Ref ConfirmUserSignupLambdaFunction
                Principal: cognito-idp.amazonaws.com
                SourceArn: !GetAtt CognitoUserPool.Arn

        WebUserPoolClient:
            Type: AWS::Cognito::UserPoolClient
            Properties:
                UserPoolId: !Ref CognitoUserPool
                ClientName: web
                ExplicitAuthFlows:
                    - ALLOW_USER_SRP_AUTH
                    - ALLOW_USER_PASSWORD_AUTH
                    - ALLOW_REFRESH_TOKEN_AUTH
                PreventUserExistenceErrors: ENABLED

        AssetsBucket:
            Type: AWS::S3::Bucket
            Properties:
                AccelerateConfiguration:
                    AccelerationStatus: Enabled
                CorsConfiguration:
                    CorsRules:
                        - AllowedMethods:
                              - GET
                              - PUT
                          AllowedOrigins:
                              - "*"
                          AllowedHeaders:
                              - "*"
                OwnershipControls:
                    Rules:
                        - ObjectOwnership: ObjectWriter

    Outputs:
        AwsRegion:
            Value: ${self:custom.region}
        CognitoUserPoolId:
            Value: !Ref CognitoUserPool
        WebCognitoUserPoolClientId:
            Value: !Ref WebUserPoolClient
